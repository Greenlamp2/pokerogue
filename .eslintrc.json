{
  "parser": "@typescript-eslint/parser", // Specifies the ESLint parser for TypeScript
  "plugins": ["@typescript-eslint", "import"], // Includes TypeScript and import plugins
  "overrides": [
    {
      "files": ["src/**/*.{ts,tsx,js,jsx}"], // Applies these rules to all TypeScript and JavaScript files in the src directory
      "rules": {
        // General rules that apply to all files
        "eqeqeq": ["error", "always"], // Enforces the use of === and !== instead of == and !=
        "indent": ["error", 2], // Enforces a 2-space indentation
        "quotes": ["error", "single"], // Enforces the use of single quotes for strings
        "no-var": "error", // Disallows the use of var, enforcing let or const instead
        "prefer-const": "error", // Prefers the use of const for variables that are never reassigned
        "no-undef": "off", // Disables the rule that disallows the use of undeclared variables (TypeScript handles this)
        "@typescript-eslint/no-unused-vars": [ "error", {
          "args": "none", // Allows unused function parameters. Useful for functions with specific signatures where not all parameters are always used.
          "ignoreRestSiblings": true // Allows unused variables that are part of a rest property in object destructuring. Useful for excluding certain properties from an object while using the rest.
        }],
        "import/no-unused-modules": ["error", { "missingExports": true, "unusedExports": false }], // Only checks for unused imports, not unused exports
        "eol-last": ["error", "always"], // Enforces at least one newline at the end of files
        "camelcase": ["error", { "properties": "always" }] // Enforces camelCase naming convention for properties
      }
    }, {
      "files": ["src/**/*.{ts,tsx,js,jsx}"], // Applies these rules to all TypeScript and JavaScript files in the src directory
      "rules": {
        "@typescript-eslint/semi": ["error", "always"], // Requires semicolons for TypeScript-specific syntax
        "semi": "off", // Disables the general semi rule for TypeScript files
        "@typescript-eslint/no-extra-semi": ["error"] // Disallows unnecessary semicolons for TypeScript-specific syntax
      }
    }
  ]
}
